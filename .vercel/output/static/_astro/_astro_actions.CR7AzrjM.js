const c={BAD_REQUEST:400,UNAUTHORIZED:401,FORBIDDEN:403,NOT_FOUND:404,TIMEOUT:405,CONFLICT:409,PRECONDITION_FAILED:412,PAYLOAD_TOO_LARGE:413,UNSUPPORTED_MEDIA_TYPE:415,UNPROCESSABLE_CONTENT:422,TOO_MANY_REQUESTS:429,CLIENT_CLOSED_REQUEST:499,INTERNAL_SERVER_ERROR:500},d=Object.entries(c).reduce((r,[t,e])=>({...r,[e]:t}),{});class a extends Error{type="AstroActionError";code="INTERNAL_SERVER_ERROR";status=500;constructor(t){super(t.message),this.code=t.code,this.status=a.codeToStatus(t.code),t.stack&&(this.stack=t.stack)}static codeToStatus(t){return c[t]}static statusToCode(t){return d[t]??"INTERNAL_SERVER_ERROR"}static async fromResponse(t){const e=await t.clone().json();return typeof e=="object"&&e?.type==="AstroActionInputError"&&Array.isArray(e.issues)?new E(e.issues):typeof e=="object"&&e?.type==="AstroActionError"?new a(e):new a({message:t.statusText,code:a.statusToCode(t.status)})}}class E extends a{type="AstroActionInputError";issues;fields;constructor(t){super({message:`Failed to validate: ${JSON.stringify(t,null,2)}`,code:"BAD_REQUEST"}),this.issues=t,this.fields={};for(const e of t)if(e.path.length>0){const n=e.path[0].toString();this.fields[n]??=[],this.fields[n]?.push(e.message)}}}async function R(r){try{return{data:await r(),error:void 0}}catch(t){return t instanceof a?{data:void 0,error:t}:{data:void 0,error:new a({message:t instanceof Error?t.message:"Unknown error",code:"INTERNAL_SERVER_ERROR"})}}}new Proxy({},{get(){throw new Error("[astro:action] `z` unexpectedly used on the client.")}});function u(r={},t="/_actions/"){return new Proxy(r,{get(e,n){if(n in e)return e[n];const i=t+n.toString(),o=s=>f(s,i);return o.toString=()=>i,o.safe=s=>R(()=>o(s)),o.safe.toString=()=>i,o.$$FORM_ACTION=function(){const s=new FormData;return s.set("_astroAction",o.toString()),{method:"POST",name:o.toString(),data:s}},o.safe.$$FORM_ACTION=function(){const s=new FormData;return s.set("_astroAction",o.toString()),s.set("_astroActionSafe","true"),{method:"POST",name:o.toString(),data:s}},u(o,i+".")}})}async function f(r,t){const e=new Headers;e.set("Accept","application/json");let n=r;if(!(n instanceof FormData)){try{n=r?JSON.stringify(r):void 0}catch(s){throw new a({code:"BAD_REQUEST",message:`Failed to serialize request body to JSON. Full error: ${s.message}`})}e.set("Content-Type","application/json"),e.set("Content-Length",n?.length.toString()??"0")}const i=await fetch(t,{method:"POST",body:n,headers:e});if(!i.ok)throw await a.fromResponse(i);return i.status===204?void 0:await i.json()}const T=u();export{T as a};
